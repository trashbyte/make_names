use std::collections::HashSet;
use xxhash_rust::xxh64::xxh64;

pub fn main() {
    let mut names = HashSet::new();
    let re = regex::Regex::new(r"name!\(([^)\x00-\x19\x7F]+)\)").unwrap();

    for entry in walkdir::WalkDir::new("src")
        .into_iter()
        .filter_map(Result::ok)
        .filter(|e| !e.file_type().is_dir())
    {
        let text = std::fs::read_to_string(entry.path()).unwrap();
        for caps in re.captures_iter(&text) {
            let s = caps.get(1).map(|m| m.as_str()).unwrap().to_string();
            let bytes: Vec<u8> = s.bytes().collect();
            let h = xxh64(&bytes[..], 0);
            names.insert((s, h));
        }
    }

    let mut namestr = String::new();
    for (name, hash) in names {
        namestr += &format!("\n            ({}u64, \"{}\".to_string()),", hash, name);
    }

    let namestr = format!("// Don't modify this file by hand, it is automatically generated by build.rs.

use std::collections::HashMap;
use xxhash_rust::xxh64::Xxh64Builder;
use parking_lot::Mutex;
lazy_static::lazy_static! {{
    pub static ref NAMES_MAP: Mutex<HashMap<u64, String, Xxh64Builder>> = {{
        let mut map = HashMap::with_hasher(Xxh64Builder::new(0));
        for (hash, name) in [{}
        ] {{
            map.insert(hash, name);
        }}
        Mutex::new(map)
    }};
}}", namestr);

    std::fs::write("src/namegen.rs", namestr).unwrap();
}
